package com.rjx.gogu02;

import java.io.IOException;
import java.lang.reflect.Field;

import org.apache.http.HttpResponse;
import org.apache.http.client.ClientProtocolException;
import org.apache.http.client.HttpClient;
import org.apache.http.client.methods.HttpGet;
import org.apache.http.impl.client.DefaultHttpClient;
import org.apache.http.util.EntityUtils;
import org.json.JSONException;
import org.json.JSONObject;

import android.R.id;
import android.app.ActionBar;
import android.content.Intent;
import android.os.AsyncTask;
import android.os.Bundle;
import android.support.v7.app.ActionBarActivity;
import android.view.Menu;
import android.view.MenuInflater;
import android.view.MenuItem;
import android.view.View;
import android.view.View.OnClickListener;
import android.view.ViewConfiguration;
import android.widget.Button;
import android.widget.EditText;

public class NewMicropostAty extends ActionBarActivity {
	
	String value="";
	HttpClient client;
	String resp="";
	EditText et1;
	
	@Override
	protected void onCreate(Bundle savedInstanceState) {
		super.onCreate(savedInstanceState);
		setContentView(R.layout.new_micropost_aty);
		
		ActionBar actionBar = getActionBar();
		actionBar.setDisplayHomeAsUpEnabled(true);
		setOverflownoShowingAlways();
		
		client = new DefaultHttpClient();
		
		Button btn1=(Button) findViewById(R.id.nm_btn1);
		Button btn2=(Button) findViewById(R.id.nm_btn2);
		
		et1=(EditText) findViewById(R.id.nm_editText1);
		
		btn1.setOnClickListener(new OnClickListener() {
			
			@Override
			public void onClick(View v) {
				Intent it=new Intent(NewMicropostAty.this, MainActivity.class);
				startActivity(it);
				finish();
			}
		});
		
		btn2.setOnClickListener(new OnClickListener() {
			
			@Override
			public void onClick(View v) {				
				value=et1.getText().toString();
				String user_id="1";
				String content=et1.getText().toString();
				createMicropostNet("http://192.168.110.128/new_micropost_json?user_id="+user_id+"&&content="+content);

			}

			
		});
	}
	
	@Override
	public boolean onCreateOptionsMenu(Menu menu) {
		MenuInflater inflater=getMenuInflater();
		inflater.inflate(R.menu.new_micropost, menu);
		return super.onCreateOptionsMenu(menu);
	}
	
	@Override
	public boolean onOptionsItemSelected(MenuItem item) {
		switch (item.getItemId()) {
		case R.id.home:
			finish();
			break;
			
		case R.id.nm_send:
			value=et1.getText().toString();
			String user_id="1";
			String content=et1.getText().toString();
			createMicropostNet("http://192.168.110.128/new_micropost_json?user_id="+user_id+"&&content="+content);

			break;
		default:
			break;
		}
		return super.onOptionsItemSelected(item);
	}
	
	private void setOverflownoShowingAlways() {  
	    try {  
	        ViewConfiguration config = ViewConfiguration.get(this);  
	        Field menuKeyField = ViewConfiguration.class.getDeclaredField("sHasPermanentMenuKey");  
	        menuKeyField.setAccessible(true);  
	        menuKeyField.setBoolean(config, true);  
	    } catch (Exception e) {  
	        e.printStackTrace();  
	    }  
	}  
	
	public void createMicropostNet(String url) {
		
			new AsyncTask<Object, Void, Integer>() {

				@Override
				protected Integer doInBackground(Object... params) {

					String urlString = (String) params[0];

					HttpGet get = new HttpGet(urlString);

					try {
						HttpResponse response = client.execute(get);
						value = EntityUtils.toString(response.getEntity());

						JSONObject result=new JSONObject(value);
					    if(result.getString("result").equals("ok")){
					    	Intent it=new Intent(NewMicropostAty.this,MainActivity.class);
					    	startActivity(it);
					    }else{
					       System.out.println("false");
						}

					} catch (ClientProtocolException e) {
						e.printStackTrace();
					} catch (IOException e) {
						e.printStackTrace();
					} catch (JSONException e) {
						// TODO Auto-generated catch block
						e.printStackTrace();
					}

					return null;

				}

			}.execute(url);
		
	}

}
